import zod from 'zod';
import * as CT from '../../../Typings/Typings.js';
import en from '../../../Languages/en-GB.json' with { type: 'json' };

export default {
 [CT.SettingNames.DenylistRules]: {},
 [CT.SettingNames.RoleRewards]: {
  roles: CT.EditorTypes.Roles,
  customrole: CT.EditorTypes.Boolean,
  maxShare: CT.EditorTypes.Number,
  positionrole: CT.EditorTypes.Role,
  xpmultiplier: CT.EditorTypes.Number,
  currency: CT.EditorTypes.Number,
  blroleid: CT.EditorTypes.Roles,
  bluserid: CT.EditorTypes.Users,
  cansetcolor: CT.EditorTypes.Boolean,
  canseticon: CT.EditorTypes.Boolean,
  cansetgradient: CT.EditorTypes.Boolean,
  cansetholo: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.AntiSpam]: {
  wlchannelid: CT.EditorTypes.Channels,
  wluserid: CT.EditorTypes.Users,
  wlroleid: CT.EditorTypes.Roles,
  msgthreshold: CT.EditorTypes.Number,
  dupemsgthreshold: CT.EditorTypes.Number,
  timeout: CT.EditorTypes.Number,
  deletespam: CT.EditorTypes.Boolean,
  deletemessageseconds: CT.EditorTypes.Duration,
  duration: CT.EditorTypes.Duration,
  action: CT.EditorTypes.Punishment,
 },
 [CT.SettingNames.AntiRaid]: {
  posttof: CT.EditorTypes.Boolean,
  postchannels: CT.EditorTypes.Channels,
  pingroles: CT.EditorTypes.Roles,
  pingusers: CT.EditorTypes.Users,
  timeout: CT.EditorTypes.Duration,
  jointhreshold: CT.EditorTypes.Number,
  action: CT.EditorTypes.AntiRaidPunishment,
  disableinvites: CT.EditorTypes.Boolean,
  actiontof: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.AntiVirus]: {
  linklogging: CT.EditorTypes.Boolean,
  linklogchannels: CT.EditorTypes.Channels,
  deletemessageseconds: CT.EditorTypes.Duration,
  duration: CT.EditorTypes.Duration,
  action: CT.EditorTypes.Punishment,
  deletemsg: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.Leveling]: {
  xpmultiplier: CT.EditorTypes.Number,
  rolemode: CT.EditorTypes.Boolean,
  lvlupmode: CT.EditorTypes.LvlUpMode,
  lvlupemotes: CT.EditorTypes.Emotes,
  lvlupdeltimeout: CT.EditorTypes.Duration,
  embed: CT.EditorTypes.Embed,
  lvlupchannels: CT.EditorTypes.Channels,
  ignoreprefixes: CT.EditorTypes.Boolean,
  prefixes: CT.EditorTypes.Strings,
  minwords: CT.EditorTypes.Number,
  requireUnmute: CT.EditorTypes.Boolean,
  excludeBots: CT.EditorTypes.Boolean,
  minParticipants: CT.EditorTypes.Number,
  lvluptext: CT.EditorTypes.String,
  blchannelid: CT.EditorTypes.Channels,
  blroleid: CT.EditorTypes.Roles,
  bluserid: CT.EditorTypes.Users,
  wlchannelid: CT.EditorTypes.Channels,
  wlroleid: CT.EditorTypes.Roles,
  wluserid: CT.EditorTypes.Users,
  pingUser: CT.EditorTypes.Boolean,
  cooldown: CT.EditorTypes.Duration,
  cooldownType: CT.EditorTypes.Boolean,
  msgXpRangeBottom: CT.EditorTypes.Number,
  msgXpRangeTop: CT.EditorTypes.Number,
  curveModifier: CT.EditorTypes.Number,
  formulaType: CT.EditorTypes.FormulaType,
  vcXpRangeBottom: CT.EditorTypes.Number,
  vcXpRangeTop: CT.EditorTypes.Number,
 },
 [CT.SettingNames.MultiChannels]: {
  channels: CT.EditorTypes.Channels,
  multiplier: CT.EditorTypes.Number,
 },
 [CT.SettingNames.MultiRoles]: {
  roles: CT.EditorTypes.Roles,
  multiplier: CT.EditorTypes.Number,
 },
 [CT.SettingNames.Welcome]: {
  channelid: CT.EditorTypes.Channel,
  embed: CT.EditorTypes.Embed,
  pingroles: CT.EditorTypes.Roles,
  pingusers: CT.EditorTypes.Users,
  pingjoin: CT.EditorTypes.Boolean,
  gifChannelId: CT.EditorTypes.Channel,
 },
 [CT.SettingNames.Verification]: {
  logchannel: CT.EditorTypes.Channel,
  pendingrole: CT.EditorTypes.Role,
  finishedrole: CT.EditorTypes.Role,
  startchannel: CT.EditorTypes.Channel,
  selfstart: CT.EditorTypes.Boolean,
  kickafter: CT.EditorTypes.Duration,
  kicktof: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.Suggestions]: {
  deletedenied: CT.EditorTypes.Boolean,
  deleteapproved: CT.EditorTypes.Boolean,
  deletedeniedafter: CT.EditorTypes.Duration,
  deleteapprovedafter: CT.EditorTypes.Duration,
  channelid: CT.EditorTypes.Channel,
  novoteroles: CT.EditorTypes.Roles,
  novoteusers: CT.EditorTypes.Users,
  approverroleid: CT.EditorTypes.Roles,
  anonvote: CT.EditorTypes.Boolean,
  anonsuggestion: CT.EditorTypes.Boolean,
  nosendroles: CT.EditorTypes.Roles,
  nosendusers: CT.EditorTypes.Users,
 },
 [CT.SettingNames.ShopItems]: {
  roles: CT.EditorTypes.Roles,
  price: CT.EditorTypes.Number,
  shoptype: CT.EditorTypes.ShopType,
  buttonemote: CT.EditorTypes.Emote,
  buttontext: CT.EditorTypes.String,
  msgid: CT.EditorTypes.Message,
 },
 [CT.SettingNames.Shop]: {
  currencyemote: CT.EditorTypes.Emote,
 },
 [CT.SettingNames.Sticky]: {
  roles: CT.EditorTypes.Roles,
  stickyrolesmode: CT.EditorTypes.Boolean,
  stickyrolesactive: CT.EditorTypes.Boolean,
  stickypermsactive: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.Separators]: {
  separator: CT.EditorTypes.Role,
  stoprole: CT.EditorTypes.Role,
  isvarying: CT.EditorTypes.Boolean,
  roles: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.SelfRoles]: {
  roles: CT.EditorTypes.Roles,
  onlyone: CT.EditorTypes.Boolean,
  blroleid: CT.EditorTypes.Roles,
  bluserid: CT.EditorTypes.Users,
  wlroleid: CT.EditorTypes.Roles,
  wluserid: CT.EditorTypes.Users,
  name: CT.EditorTypes.String,
 },
 [CT.SettingNames.Expiry]: {
  bans: CT.EditorTypes.Boolean,
  channelbans: CT.EditorTypes.Boolean,
  kicks: CT.EditorTypes.Boolean,
  mutes: CT.EditorTypes.Boolean,
  warns: CT.EditorTypes.Boolean,
  voice: CT.EditorTypes.Boolean,
  banstime: CT.EditorTypes.Duration,
  channelbanstime: CT.EditorTypes.Duration,
  kickstime: CT.EditorTypes.Duration,
  mutestime: CT.EditorTypes.Duration,
  warnstime: CT.EditorTypes.Duration,
  voicetime: CT.EditorTypes.Duration,
 },
 [CT.SettingNames.Logs]: {
  applicationevents: CT.EditorTypes.Channels,
  automodevents: CT.EditorTypes.Channels,
  channelevents: CT.EditorTypes.Channels,
  emojievents: CT.EditorTypes.Channels,
  guildevents: CT.EditorTypes.Channels,
  scheduledeventevents: CT.EditorTypes.Channels,
  inviteevents: CT.EditorTypes.Channels,
  messageevents: CT.EditorTypes.Channels,
  roleevents: CT.EditorTypes.Channels,
  stageevents: CT.EditorTypes.Channels,
  stickerevents: CT.EditorTypes.Channels,
  typingevents: CT.EditorTypes.Channels,
  userevents: CT.EditorTypes.Channels,
  voiceevents: CT.EditorTypes.Channels,
  webhookevents: CT.EditorTypes.Channels,
  settingslog: CT.EditorTypes.Channels,
  modlog: CT.EditorTypes.Channels,
  memberevents: CT.EditorTypes.Channels,
 },
 [CT.SettingNames.Basic]: {
  prefix: CT.EditorTypes.String,
  interactionsmode: CT.EditorTypes.Boolean,
  legacyrp: CT.EditorTypes.Boolean,
  editrpcommands: CT.EditorTypes.Boolean,
  lan: CT.EditorTypes.Language,
  errorchannel: CT.EditorTypes.Channel,
  notifychannel: CT.EditorTypes.Channel,
  statuschannel: CT.EditorTypes.Channel,
  updateschannel: CT.EditorTypes.Channel,
  ptreminderenabled: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.CustomClient]: {
  appid: CT.EditorTypes.User,
  token: CT.EditorTypes.BotToken,
  secret: CT.EditorTypes.BotToken,
 },
 [CT.SettingNames.DisboardReminders]: {
  repeatreminder: CT.EditorTypes.Duration,
  channelid: CT.EditorTypes.Channel,
  roles: CT.EditorTypes.Roles,
  users: CT.EditorTypes.Users,
  deletereply: CT.EditorTypes.Boolean,
  repeatenabled: CT.EditorTypes.Boolean,
 },
 [CT.SettingNames.Cooldowns]: {
  command: CT.EditorTypes.Command,
  cooldown: CT.EditorTypes.Duration,
  wlchannelid: CT.EditorTypes.Channels,
  wlroleid: CT.EditorTypes.Roles,
  wluserid: CT.EditorTypes.Users,
  activechannelid: CT.EditorTypes.Channels,
 },
 [CT.SettingNames.Censor]: {
  repostroles: CT.EditorTypes.Roles,
  repostrules: CT.EditorTypes.AutoModRules,
 },
 [CT.SettingNames.Newlines]: {
  maxnewlines: CT.EditorTypes.Number,
  wlchannelid: CT.EditorTypes.Channels,
  wlroleid: CT.EditorTypes.Roles,
  action: CT.EditorTypes.Punishment,
  duration: CT.EditorTypes.Duration,
  deletemessageseconds: CT.EditorTypes.Duration,
 },
 [CT.SettingNames.Invites]: {
  wlchannelid: CT.EditorTypes.Channels,
  wlroleid: CT.EditorTypes.Roles,
  deletemessageseconds: CT.EditorTypes.Duration,
  action: CT.EditorTypes.Punishment,
  duration: CT.EditorTypes.Duration,
 },
 [CT.SettingNames.AutoPunish]: {
  duration: CT.EditorTypes.Duration,
  warnamount: CT.EditorTypes.Number,
  punishment: CT.EditorTypes.AutoPunishment,
  addroles: CT.EditorTypes.Roles,
  removeroles: CT.EditorTypes.Roles,
  deletemessageseconds: CT.EditorTypes.Duration,
 },
 [CT.SettingNames.AutoRoles]: {
  botroleid: CT.EditorTypes.Roles,
  userroleid: CT.EditorTypes.Roles,
  allroleid: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.LevelRoles]: {
  level: CT.EditorTypes.Number,
  roles: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.RuleChannels]: {
  rules: CT.EditorTypes.Permission,
  channels: CT.EditorTypes.Channels,
  hasleastattachments: CT.EditorTypes.Number,
  hasmostattachments: CT.EditorTypes.Number,
  hasleastcharacters: CT.EditorTypes.Number,
  hasmostcharacters: CT.EditorTypes.Number,
  hasleastwords: CT.EditorTypes.Number,
  hasmostwords: CT.EditorTypes.Number,
  mentionsleastusers: CT.EditorTypes.Number,
  mentionsmostusers: CT.EditorTypes.Number,
  mentionsleastchannels: CT.EditorTypes.Number,
  mentionsmostchannels: CT.EditorTypes.Number,
  mentionsleastroles: CT.EditorTypes.Number,
  mentionsmostroles: CT.EditorTypes.Number,
  hasleastlinks: CT.EditorTypes.Number,
  hasmostlinks: CT.EditorTypes.Number,
  hasleastemotes: CT.EditorTypes.Number,
  hasmostemotes: CT.EditorTypes.Number,
  hasleastmentions: CT.EditorTypes.Number,
  hasmostmentions: CT.EditorTypes.Number,
 },
 [CT.SettingNames.BoosterRoles]: {
  roles: CT.EditorTypes.Roles,
  days: CT.EditorTypes.Number,
 },
 [CT.SettingNames.Nitro]: {
  logchannels: CT.EditorTypes.Channels,
  rolemode: CT.EditorTypes.Boolean,
  notification: CT.EditorTypes.Boolean,
  notifchannels: CT.EditorTypes.Channels,
  notifembed: CT.EditorTypes.Embed,
 },
 [CT.SettingNames.Vote]: {
  token: CT.EditorTypes.Token,
  reminders: CT.EditorTypes.Boolean,
  announcementchannel: CT.EditorTypes.Channel,
  name: CT.EditorTypes.String,
 },
 [CT.SettingNames.VoteRewards]: {
  rewardxp: CT.EditorTypes.Number,
  rewardxpmultiplier: CT.EditorTypes.Number,
  rewardcurrency: CT.EditorTypes.Number,
  rewardroles: CT.EditorTypes.Roles,
  weekends: CT.EditorTypes.WeekendsType,
 },
 [CT.SettingNames.ReactionRoleSettings]: {
  anyroles: CT.EditorTypes.Roles,
  msgid: CT.EditorTypes.Message,
 },
 [CT.SettingNames.ButtonRoleSettings]: {
  onlyone: CT.EditorTypes.Boolean,
  anyroles: CT.EditorTypes.Roles,
  msgid: CT.EditorTypes.Message,
 },
 [CT.SettingNames.ButtonRoles]: {
  emote: CT.EditorTypes.Emote,
  text: CT.EditorTypes.String,
  roles: CT.EditorTypes.Roles,
  linkedid: CT.EditorTypes.SettingLink,
 },
 [CT.SettingNames.ReactionRoles]: {
  emote: CT.EditorTypes.Emote,
  roles: CT.EditorTypes.Roles,
  linkedid: CT.EditorTypes.SettingLink,
 },
 [CT.SettingNames.VoiceHubs]: {
  channelid: CT.EditorTypes.Voice,
  categoryid: CT.EditorTypes.Category,
  deletetime: CT.EditorTypes.Duration,
  private: CT.EditorTypes.Boolean,
  bluserid: CT.EditorTypes.Users,
  blroleid: CT.EditorTypes.Roles,
  wlroleid: CT.EditorTypes.Roles,
  wluserid: CT.EditorTypes.Users,
 },
 [CT.SettingNames.Appeals]: {
  channelid: CT.EditorTypes.Channel,
  bluserid: CT.EditorTypes.Users,
  reviewroleid: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.Questions]: {
  question: CT.EditorTypes.String,
  answertype: CT.EditorTypes.QuestionType,
  required: CT.EditorTypes.Boolean,
  options: CT.EditorTypes.Strings,
 },
 [CT.SettingNames.Afk]: {
  maxLetters: CT.EditorTypes.Number,
 },
 [CT.SettingNames.LinkedRolesDeco]: {
  roleId: CT.EditorTypes.Role,
  botId: CT.EditorTypes.User,
  botToken: CT.EditorTypes.BotToken,
  botSecret: CT.EditorTypes.BotToken,
  allowedUsers: CT.EditorTypes.Users,
  allowedRoles: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.PingReporter]: {
  roleId: CT.EditorTypes.Role,
  channelIds: CT.EditorTypes.Channels,
  cooldown: CT.EditorTypes.Duration,
 },
 [CT.SettingNames.VotePunish]: {
  roleId: CT.EditorTypes.Role,
  channelIds: CT.EditorTypes.Channels,
  reqRoles: CT.EditorTypes.Roles,
  reqRoleAmount: CT.EditorTypes.Number,
  cooldown: CT.EditorTypes.Duration,
  punishment: CT.EditorTypes.AutoPunishment,
  duration: CT.EditorTypes.Duration,
  deleteMessageSeconds: CT.EditorTypes.Duration,
  voteInitRoles: CT.EditorTypes.Roles,
  bluserid: CT.EditorTypes.Users,
  blroleid: CT.EditorTypes.Roles,
 },
 [CT.SettingNames.Ticketing]: {
  type: CT.EditorTypes.TicketingType,
  active: CT.EditorTypes.Boolean,
  channelId: CT.EditorTypes.Channel,
  categoryId: CT.EditorTypes.Category,
  archiveDuration: CT.EditorTypes.ThreadAutoArchiveDuration,
  mentionRoles: CT.EditorTypes.Roles,
  mentionUsers: CT.EditorTypes.Users,
  sendMessagePrefixes: CT.EditorTypes.Strings,
  blroleid: CT.EditorTypes.Roles,
  bluserid: CT.EditorTypes.Users,
  logChannelIds: CT.EditorTypes.Channels,
  archiveCategoryId: CT.EditorTypes.Category,
 },
};

const role = zod.string().regex(/^(\d{17,19})$/);
const channel = zod.string().regex(/^(\d{17,19})$/);
const user = zod.string().regex(/^(\d{17,19})$/);
const message = zod.string().regex(/^(\d{17,19})$/);
const emote = zod.string().regex(/^(\S|(\S:\D))$/);

const roles = zod.array(role);
const channels = zod.array(channel);
const users = zod.array(user);
const emotes = zod.array(emote);

const boolean = zod.boolean();
const number = zod.number();
const string = zod.string();
const strings = zod.array(string);

const uniquetimestamp = zod
 .number()
 .int()
 .refine((val) => String(val).length === String(Date.now()).length);

const punishment = zod.enum(Object.keys(en.languages));
const antiraidPunishemnts = zod.enum(
 Object.keys(en.punishments).filter((val) => !['kick', 'ban', 'mute'].includes(val)),
);
const autoPunishemnts = zod.enum(
 Object.keys(en.punishments).filter(
  (val) =>
   ![
    'warn',
    'tempmute',
    'tempchannelban',
    'channelban',
    'kick',
    'tempban',
    'softban',
    'ban',
    'vctempmute',
    'vctempdeaf',
    'vcdeaf',
    'vcmute',
    'mute',
   ].includes(val),
 ),
);

const lvlUpModes = zod.enum(Object.keys(en.lvlupmodes));
const formulaTypes = zod.enum(Object.keys(en.formulatypes));
const languages = zod.enum(Object.keys(en.languages));
const shopTypes = zod.enum(Object.keys(en.shoptypes));
const weekendsTypes = zod.enum(Object.keys(en.weekendstype));
const answerTypes = zod.enum(Object.keys(en.answertypes));
const ticketTypes = zod.enum(Object.keys(en.ticketingtype));
const threadAutoArchiveDurations = zod.enum(Object.keys(en.threadAutoArchiveDurations));

export const zodValidators = {
 [CT.SettingNames.DenylistRules]: {},
 [CT.SettingNames.RoleRewards]: {
  roles: roles,
  customrole: boolean,
  maxShare: number,
  positionrole: role,
  xpmultiplier: number,
  currency: number,
  blroleid: roles,
  bluserid: users,
  cansetcolor: boolean,
  canseticon: boolean,
  cansetgradient: boolean,
  cansetholo: boolean,
 },
 [CT.SettingNames.AntiSpam]: {
  wlchannelid: channels,
  wluserid: users,
  wlroleid: roles,
  msgthreshold: number,
  dupemsgthreshold: number,
  timeout: number,
  deletespam: boolean,
  deletemessageseconds: number,
  duration: number,
  action: punishment,
 },
 [CT.SettingNames.AntiRaid]: {
  posttof: boolean,
  postchannels: channels,
  pingroles: roles,
  pingusers: users,
  timeout: number,
  jointhreshold: number,
  action: antiraidPunishemnts,
  disableinvites: boolean,
  actiontof: boolean,
 },
 [CT.SettingNames.AntiVirus]: {
  linklogging: boolean,
  linklogchannels: channels,
  deletemessageseconds: number,
  duration: number,
  action: punishment,
  deletemsg: boolean,
 },
 [CT.SettingNames.Leveling]: {
  xpmultiplier: number,
  rolemode: boolean,
  lvlupmode: lvlUpModes,
  lvlupemotes: emotes,
  lvlupdeltimeout: number,
  embed: uniquetimestamp,
  lvlupchannels: channels,
  ignoreprefixes: boolean,
  prefixes: string,
  minwords: number,
  requireUnmute: boolean,
  excludeBots: boolean,
  minParticipants: number,
  lvluptext: string,
  blchannelid: channels,
  blroleid: roles,
  bluserid: users,
  wlchannelid: channels,
  wlroleid: roles,
  wluserid: users,
  pingUser: boolean,
  cooldown: number,
  cooldownType: boolean,
  msgXpRangeBottom: number,
  msgXpRangeTop: number,
  curveModifier: number,
  formulaType: formulaTypes,
  vcXpRangeBottom: number,
  vcXpRangeTop: number,
 },
 [CT.SettingNames.MultiChannels]: {
  channels: channels,
  multiplier: number,
 },
 [CT.SettingNames.MultiRoles]: {
  roles: roles,
  multiplier: number,
 },
 [CT.SettingNames.Welcome]: {
  channelid: channel,
  embed: uniquetimestamp,
  pingroles: roles,
  pingusers: users,
  pingjoin: boolean,
  gifChannelId: channel,
 },
 [CT.SettingNames.Verification]: {
  logchannel: channel,
  pendingrole: role,
  finishedrole: role,
  startchannel: channel,
  selfstart: boolean,
  kickafter: number,
  kicktof: boolean,
 },
 [CT.SettingNames.Suggestions]: {
  deletedenied: boolean,
  deleteapproved: boolean,
  deletedeniedafter: number,
  deleteapprovedafter: number,
  channelid: channel,
  novoteroles: roles,
  novoteusers: users,
  approverroleid: roles,
  anonvote: boolean,
  anonsuggestion: boolean,
  nosendroles: roles,
  nosendusers: users,
 },
 [CT.SettingNames.ShopItems]: {
  roles: roles,
  price: number,
  shoptype: shopTypes,
  buttonemote: emote,
  buttontext: string,
  msgid: message,
 },
 [CT.SettingNames.Shop]: {
  currencyemote: emote,
 },
 [CT.SettingNames.Sticky]: {
  roles: roles,
  stickyrolesmode: boolean,
  stickyrolesactive: boolean,
  stickypermsactive: boolean,
 },
 [CT.SettingNames.Separators]: {
  separator: role,
  stoprole: role,
  isvarying: boolean,
  roles: roles,
 },
 [CT.SettingNames.SelfRoles]: {
  roles: roles,
  onlyone: boolean,
  blroleid: roles,
  bluserid: users,
  wlroleid: roles,
  wluserid: users,
  name: string,
 },
 [CT.SettingNames.Expiry]: {
  bans: boolean,
  channelbans: boolean,
  kicks: boolean,
  mutes: boolean,
  warns: boolean,
  voice: boolean,
  banstime: number,
  channelbanstime: number,
  kickstime: number,
  mutestime: number,
  warnstime: number,
  voicetime: number,
 },
 [CT.SettingNames.Logs]: {
  applicationevents: channels,
  automodevents: channels,
  channelevents: channels,
  emojievents: channels,
  guildevents: channels,
  scheduledeventevents: channels,
  inviteevents: channels,
  messageevents: channels,
  roleevents: channels,
  stageevents: channels,
  stickerevents: channels,
  typingevents: channels,
  userevents: channels,
  voiceevents: channels,
  webhookevents: channels,
  settingslog: channels,
  modlog: channels,
  memberevents: channels,
 },
 [CT.SettingNames.Basic]: {
  prefix: string,
  interactionsmode: boolean,
  legacyrp: boolean,
  editrpcommands: boolean,
  lan: languages,
  errorchannel: channel,
  notifychannel: channel,
  statuschannel: channel,
  updateschannel: channel,
  ptreminderenabled: boolean,
 },
 [CT.SettingNames.CustomClient]: {
  appid: user,
  token: string,
  secret: string,
 },
 [CT.SettingNames.DisboardReminders]: {
  repeatreminder: number,
  channelid: channel,
  roles: roles,
  users: users,
  deletereply: boolean,
  repeatenabled: boolean,
 },
 [CT.SettingNames.Cooldowns]: {
  command: string,
  cooldown: number,
  wlchannelid: channels,
  wlroleid: roles,
  wluserid: users,
  activechannelid: channels,
 },
 [CT.SettingNames.Censor]: {
  repostroles: roles,
  repostrules: uniquetimestamp,
 },
 [CT.SettingNames.Newlines]: {
  maxnewlines: number,
  wlchannelid: channels,
  wlroleid: roles,
  action: punishment,
  duration: number,
  deletemessageseconds: number,
 },
 [CT.SettingNames.Invites]: {
  wlchannelid: channels,
  wlroleid: roles,
  deletemessageseconds: number,
  action: punishment,
  duration: number,
 },
 [CT.SettingNames.AutoPunish]: {
  duration: number,
  warnamount: number,
  punishment: autoPunishemnts,
  addroles: roles,
  removeroles: roles,
  deletemessageseconds: number,
 },
 [CT.SettingNames.AutoRoles]: {
  botroleid: roles,
  userroleid: roles,
  allroleid: roles,
 },
 [CT.SettingNames.LevelRoles]: {
  level: number,
  roles: roles,
 },
 [CT.SettingNames.RuleChannels]: {
  // rules: CT.EditorTypes.Permission,
  channels: channels,
  hasleastattachments: number,
  hasmostattachments: number,
  hasleastcharacters: number,
  hasmostcharacters: number,
  hasleastwords: number,
  hasmostwords: number,
  mentionsleastusers: number,
  mentionsmostusers: number,
  mentionsleastchannels: number,
  mentionsmostchannels: number,
  mentionsleastroles: number,
  mentionsmostroles: number,
  hasleastlinks: number,
  hasmostlinks: number,
  hasleastemotes: number,
  hasmostemotes: number,
  hasleastmentions: number,
  hasmostmentions: number,
 },
 [CT.SettingNames.BoosterRoles]: {
  roles: roles,
  days: number,
 },
 [CT.SettingNames.Nitro]: {
  logchannels: channels,
  rolemode: boolean,
  notification: boolean,
  notifchannels: channels,
  notifembed: uniquetimestamp,
 },
 [CT.SettingNames.Vote]: {
  token: string,
  reminders: boolean,
  announcementchannel: channel,
  name: string,
 },
 [CT.SettingNames.VoteRewards]: {
  rewardxp: number,
  rewardxpmultiplier: number,
  rewardcurrency: number,
  rewardroles: roles,
  weekends: weekendsTypes,
 },
 [CT.SettingNames.ReactionRoleSettings]: {
  anyroles: roles,
  msgid: message,
 },
 [CT.SettingNames.ButtonRoleSettings]: {
  onlyone: boolean,
  anyroles: roles,
  msgid: message,
 },
 [CT.SettingNames.ButtonRoles]: {
  emote: emote,
  text: string,
  roles: roles,
  linkedid: uniquetimestamp,
 },
 [CT.SettingNames.ReactionRoles]: {
  emote: emote,
  roles: roles,
  linkedid: uniquetimestamp,
 },
 [CT.SettingNames.VoiceHubs]: {
  channelid: channel,
  categoryid: channel,
  deletetime: number,
  private: boolean,
  bluserid: users,
  blroleid: roles,
  wlroleid: roles,
  wluserid: users,
 },
 [CT.SettingNames.Appeals]: {
  channelid: channel,
  bluserid: users,
  reviewroleid: roles,
 },
 [CT.SettingNames.Questions]: {
  question: string,
  answertype: answerTypes,
  required: boolean,
  options: strings,
 },
 [CT.SettingNames.Afk]: {
  maxLetters: number,
 },
 [CT.SettingNames.LinkedRolesDeco]: {
  roleId: role,
  botId: user,
  botToken: string,
  botSecret: string,
  allowedUsers: users,
  allowedRoles: roles,
 },
 [CT.SettingNames.PingReporter]: {
  roleId: role,
  channelIds: channels,
  cooldown: number,
 },
 [CT.SettingNames.VotePunish]: {
  roleId: role,
  channelIds: channels,
  reqRoles: roles,
  reqRoleAmount: number,
  cooldown: number,
  punishment: autoPunishemnts,
  duration: number,
  deleteMessageSeconds: number,
  voteInitRoles: roles,
  bluserid: users,
  blroleid: roles,
 },
 [CT.SettingNames.Ticketing]: {
  type: ticketTypes,
  active: boolean,
  channelId: channel,
  categoryId: channel,
  archiveDuration: threadAutoArchiveDurations,
  mentionRoles: roles,
  mentionUsers: users,
  sendMessagePrefixes: strings,
  blroleid: roles,
  bluserid: users,
  logChannelIds: channels,
  archiveCategoryId: channel,
 },
};
